#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\use_default_options true
\master Capitolo 6.lyx
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "beraserif" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 2.5cm
\rightmargin 3cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Design Pattern
\end_layout

\begin_layout Standard
I principali design pattern utilizzati sono stati: 
\end_layout

\begin_layout Itemize
Pattern GRASP 
\end_layout

\begin_layout Itemize
Pattern Repository 
\end_layout

\begin_layout Itemize
Pattern Observer 
\end_layout

\begin_layout Subsection
Pattern GRASP
\end_layout

\begin_layout Standard
I pattern GRASP sono molto utili perché permettono di gestire al meglio
 le responsabilità di ogni classe.
 Si basano sul concetto di 
\emph on
Responsibility Driven Design 
\emph default
(RDD), ovvero un modo di progettare ad oggetti facendosi guidare dalle responsab
ilità.
 Questo tipo di pattern è essenziale per scrivere un codice più pulito,
 comprensibile, organizzato, manutenibile e modificabile.
\end_layout

\begin_layout Standard
Si è fatto uso dei seguenti pattern GRASP: 
\end_layout

\begin_layout Itemize
Information expert
\end_layout

\begin_layout Itemize
Session controller 
\end_layout

\begin_layout Itemize
Basso accoppiamento 
\end_layout

\begin_layout Itemize
Alta coesione 
\end_layout

\begin_layout Paragraph
Information expert: 
\end_layout

\begin_layout Standard
Ogni oggetto dovrebbe avere le responsabilità per cui possiede le informazioni
 necessarie a soddisfarle.
 Nel caso in cui occorre gestire una lista di oggetti di una certa classe,
 quindi, non è opportuno assegnare tale responsabilità a questa classe,
 poiché questa conosce solo le informazioni di un unico oggetto.
\end_layout

\begin_layout Standard
È stato quindi creata una classe apposita in due occasioni: 
\end_layout

\begin_layout Itemize

\emph on
TravelJournal
\emph default
, usata quando si vuole gestire un insieme di più 
\emph on
Memory
\emph default
 
\end_layout

\begin_layout Itemize

\emph on
TravelerList
\emph default
, usata quando si vuole gestire un insieme di più 
\emph on
Traveler
\end_layout

\begin_layout Paragraph
Session controller: 
\end_layout

\begin_layout Standard
Le architetture a strati prevedono una separazione tra UI e logica applicativa.
 La UI delega le richieste al controller, che coordina vari oggetti del
 dominio per soddisfare la richiesta.
\end_layout

\begin_layout Standard
Nel caso dell'applicazione Travelgram, che adotta il pattern MVVM, non esiste
 un vero e proprio controller.
 L'obiettivo delle classi ViewModel, infatti, è quello di presentare i dati
 provenienti dal Model alla View, attraverso opportune conversioni di formato.
 Il ViewModel incapsula quindi la logica di preparazione dei dati, più che
 quella di controllo.
 Tuttavia, nel caso in cui occorre conoscere informazioni legate a più entità,
 ha senso affidare al ViewModel il compito di coordinare le varie entità
 del model per ottenere tali informazioni.
\end_layout

\begin_layout Standard
Le classi ViewModel, sebbene non siano dei veri e propri controller, possono
 essere viste come implementazioni del pattern GRASP
\series bold
 Session Controller
\series default
 (o Controller di Caso d'Uso), ovvero un oggetto che gestisce gli eventi
 di uno specifico caso d'uso, senza corrispondere a nessuno specifico oggetto
 del dominio.
 Ogni View, infatti, inoltra gli input ad un oggetto ViewModel ad essa associata
, che si occupa poi di gestire la richiesta.
 Poiché su applicazioni mobile, in genere, una View gestisce un singolo
 caso d'uso, anche il suo ViewModel gestirà unicamente quello stesso caso
 d'uso.
 
\end_layout

\begin_layout Paragraph
Low coupling: 
\end_layout

\begin_layout Standard
L'obiettivo è quello di cercare di creare meno dipendenze possibili tra
 le classi.
 Troppe dipendenze, infatti, rendono il codice più difficile da modificare
 e manutenere, dal momento che anche una piccola modifica può impattare
 un gran numero di classi.
\end_layout

\begin_layout Paragraph
Alta coesione:
\end_layout

\begin_layout Standard
Consiste nel mantenere gli oggetti focalizzati e comprensibili.
 L'uso di questo pattern è dimostrato dall'uso di oggetti di entità, ognuno
 dei quali raggruppa tutte le funzionalità relative solo a se stessa.
 Altre classi pensate per supportare l'alta coesione sono le classi Repository,
 ognuna delle quali contiene tutte le interrogazioni relative ad un'unica
 collezione dati, senza suddividere tali richieste in più classi.
 
\end_layout

\begin_layout Subsection
Pattern Repository
\end_layout

\begin_layout Standard
Come già accennato, il package Repository è visto come un'astrazione del
 database.
 Nella nostra implementazione, ogni oggetto Entity ha la responsabilità
 di usare uno specifico oggetto Repository per ottenere dati dal database
 o inserire dati sul database.
 Per via della natura asincrona di Firebase, un oggetto Repository comunica
 il successo di un'operazione all'Entity tramite callback.
 
\end_layout

\begin_layout Subsection
Pattern Observer
\end_layout

\begin_layout Standard
Il pattern Observer permette a uno o più oggetti (
\emph on
observers
\emph default
) di osservare i cambiamenti di stato di un altro oggetto (
\emph on
subject
\emph default
).
 Nell'applicazione Travelgram si è fatto largo uso di questo pattern in
 diverse varianti: 
\end_layout

\begin_layout Itemize
Data binding: realizzato con i metodi della classe nativa di Android "MutableLiv
eData" 
\end_layout

\begin_layout Itemize
Pattern Observer: classica implementazione del pattern attraverso le classi
 di java.utils 
\end_layout

\begin_layout Itemize
Callback: può essere vista come una variante semplificata del pattern
\end_layout

\begin_layout Standard
La dinamica di queste comunicazioni è stata già trattata nella sezione 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Dinamica-del-Sistema"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (dinamica del sistema), ma in questa sezione si mostra in dettaglio l'implement
azione.
 
\end_layout

\begin_layout Paragraph
Data Binding:
\end_layout

\begin_layout Standard
L'oggetto ViewModel contiene un oggetto di tipo MutableLiveData della libreria
 androidx.lifecycle.
 È stata quindi usata tale implementazione del pattern observer per la comunicaz
ione tra View e ViewModel, usando i metodi: 
\end_layout

\begin_layout Itemize

\emph on
getValue()
\emph default
 per ottenere un riferimento al dato 
\end_layout

\begin_layout Itemize

\emph on
observe() 
\emph default
per tenere traccia dei cambiamenti
\end_layout

\begin_layout Standard
Si noti come il viewModel non conosce affatto l'oggetto View.
 In figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Data-binding-con"
plural "false"
caps "false"
noprefix "false"

\end_inset

 è mostrato un esempio.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/livedata.png
	scale 80

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Data-binding-con"

\end_inset

Data binding con LiveData
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Pattern Observer:
\end_layout

\begin_layout Standard
La versione classica del pattern è stata usata per la comunicazione tra
 ViewModel e Model.Entity ed implementata sfruttando le classi Observer e
 Observable della libreria java.utils.
\end_layout

\begin_layout Standard
Sono stati usati i metodi: 
\end_layout

\begin_layout Itemize

\emph on
addObserver(this)
\emph default
 per osservare il subject 
\end_layout

\begin_layout Itemize

\emph on
setChanged() 
\emph default
per indicare un cambiamento di stato 
\end_layout

\begin_layout Itemize

\emph on
notifyObservers() 
\emph default
per notificare gli observer del cambiamento 
\end_layout

\begin_layout Itemize

\emph on
update()
\emph default
 per gestire la notifica del cambiamento
\end_layout

\begin_layout Standard
In figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Pattern-Observer"
plural "false"
caps "false"
noprefix "false"

\end_inset

 è mostrato un esempio.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/observer.png
	scale 80

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Pattern-Observer"

\end_inset

Pattern Observer
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Callback:
\end_layout

\begin_layout Standard
Per la comunicazione tra Entity e Repository, è stato scelto di usare una
 versione semplificata del pattern Observer, dal momento che in questi casi
 vi è sempre solo un unico osservatore.
 In particolare, l'oggetto Entity passa il suo riferimento all'oggetto Repositor
y, così che quest'ultimo possa avvisarlo e passargli il risultato una volta
 che l'operazione ha termine attraverso il metodo 
\emph on
callback()
\emph default
.
 
\end_layout

\end_body
\end_document
