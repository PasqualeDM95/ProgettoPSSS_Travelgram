#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\use_default_options true
\master Capitolo 6.lyx
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "beraserif" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 2.5cm
\rightmargin 3cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Firestore Query
\end_layout

\begin_layout Standard
Le query per l'interrogazione del database Firestore di Firebase possono
 raccogliere uno specifico documento o un insieme di documenti all'interno
 di una collezione.
\end_layout

\begin_layout Standard
Per l'applicazione Travelgram, si è fatto uso anche di particolari query
 dette 
\series bold
document
\series default
 
\series bold
snapshot
\series default
, che permettono di ottenere degli aggiornamenti in tempo reale dal database.
 Ogni volta che il contenuto del documento osservato cambia, la query è
 rieseguita automaticamente.
\end_layout

\begin_layout Standard
Le query sono molto performanti grazie all'utilizzo di opportuni 
\series bold
indici
\series default
.
 Ogni volta che viene inserito un nuovo documento sul database, viene creato
 automaticamente un indice per ogni campo del documento.
 Ciò permette di ottimizzare le operazioni di lettura, che avvengono quindi
 in tempi brevissimi, penalizzando però i tempi di scrittura di documenti
 con molti campi.
 Questo problema è però trascurabile, dal momento che in media il numero
 di scritture è inferiore del numero di letture per molti ordini di grandezza.
 L'indicizzazione rende il processo di interrogazione scalabile, poiché
 fa si che le performance non siano proporzionali all'intero dataset, ma
 solo al result set.
 
\end_layout

\begin_layout Paragraph
Filtraggio delle query: 
\end_layout

\begin_layout Standard
Piuttosto che eseguire delle query generali ed effettuare successivamente
 un'operazione di filtraggio in java, si è preferito eseguire il filtraggio
 direttamente nelle query.
 Il motivo è che nel primo caso, se ad esempio avessimo voluto recuperare
 tutte le Memory relative a un dato luogo, avremmo dovuto prima ottenere
 tutte le Memory presenti sul database (che in un social potrebbero essere
 milioni), operazione che avrebbe provocato un eccessivo ed ingiustificato
 consumo di risorse (memoria, dati, batteria, tempo).
 
\end_layout

\begin_layout Paragraph
Query con più risultati: 
\end_layout

\begin_layout Standard
Come anticipato nella sezione 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Class-Diagrams"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (class diagram), nei casi in cui è stato necessario recuperare informazioni
 relative a più oggetti dello stesso tipo (ad esempio un insieme di Memory
 o una lista di Traveler), si è preferito ottenere tutti i risultati attraverso
 un'unica query.
 Questo metodo, infatti, è molto più efficiente rispetto al caso in cui
 si effettuino, in un ciclo for, molteplici query, ognuna delle quali recupera
 un singolo elemento.
 Ciò è vero per vari motivi: 
\end_layout

\begin_layout Itemize
Si riduce l'
\series bold
overhead
\series default
: l'overhead di un'unica grande query è sicuramente minore di quello di
 molte query piccole 
\end_layout

\begin_layout Itemize
È più 
\series bold
facile da gestire
\series default
: essendo le query asincrone, e dovendo gestire ognuna di esse con un Listener
 dedicato, è più difficile gestire un grande numero di query alla volta
 
\end_layout

\begin_layout Itemize
È più 
\series bold
economico
\series default
: il costo del servizio Firestore è proporzionale al numero di letture effettuat
e.
 Ogni query conta infatti come un'unica lettura, a prescindere dal numero
 di documenti restituiti.
 In particolare, il prezzo è di $ 0.06 ogni 100 mila letture.
 
\end_layout

\begin_layout Itemize
È più 
\series bold
scalabile
\series default
: all'aumentare del numero di documenti da recuperare, la query da effettuare
 è sempre e solo una 
\end_layout

\end_body
\end_document
