#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\use_default_options true
\master Capitolo 7.lyx
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "beraserif" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 2.5cm
\rightmargin 3cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Fase di Capture
\end_layout

\begin_layout Standard
Nella fase di Capture l'applicazione viene eseguita utilizzando 
\emph on
Espresso
\emph default
 (e non il solito 
\emph on
"run"
\emph default
 di Android Studio), il tool avvierà l'applicazione sull'emulatore (o sul
 dispositivo reale collegato) e contemporaneamente avvierà anche il sistema
 di 
\emph on
Capture
\emph default
.
 Quest'ultimo è un ambiente controllato che registra in un log le interazioni
 fatte sull'interfaccia dall'utente, e ciò è visibile durante l'utilizzo
 dell'applicazione tramite una schermata del tipo di figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schermata-di-Capture"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/test1.png
	scale 80

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Schermata di Capture
\begin_inset CommandInset label
LatexCommand label
name "fig:Schermata-di-Capture"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Inizialmente questa schermata presenterà il messaggio 
\emph on
“No events recorded yet”
\emph default
, successivamente questo verrà sostituito dall’elenco delle azioni registrate
 nel momento in cui esse sono eseguite.
 
\end_layout

\begin_layout Standard

\emph on
"Add assertions" 
\emph default
permette di verificare l’esistenza di determinati elementi dell’interfaccia
 o il contenuto di essi attraverso delle asserzioni, in cui Espresso crea
 una vista dell’interfaccia dell’applicazione ed aiuta il tester a riconoscere
 i vari elementi evidenziandoli con dei riquadri rossi; è possibile selezionarli
 cliccandoli sulla vista oppure scegliendoli dalla lista del menù 
\emph on
Edit
\emph default
 
\emph on
Assertion
\emph default
.
 
\end_layout

\begin_layout Standard
Il tipo di asserzione varia in base all’elemento selezionato (ad esempio
 un pulsante può esistere o meno, e quindi l’asserzione sarà 
\emph on
Assert
\emph default
 
\emph on
Button
\emph default
 
\emph on
with ID X exists/does not exist
\emph default
; per le sezioni caratterizzate da testo è inoltre possibile asserire 
\emph on
Text is
\emph default
 e controllare cosa vi sia scritto.
 
\end_layout

\begin_layout Standard
La fase di capture si conclude con la generazione del codice.
 Qui gli oggetti della GUI coinvolti nel record sono identificati da un
 ID, spesso anche dal testo con cui vengono mostrati sull’interfaccia, o
 anche da quali classi derivano (
\emph on
ChildOfPosition
\emph default
).
 Per riferirsi ad un oggetto di una determinata vista dell’interfaccia si
 utilizza il metodo 
\emph on
onView()
\emph default
, questo ritorna un oggetto 
\emph on
ViewInteraction
\emph default
 che permette di interagire con la vista.
 Per indicare da che tipo di attributo esso sia identificato si utilizza
 il metodo with*( ), dove * sta per il tipo di attributo; ad esempio per
 Id e testo si utilizzano rispettivamente withId( ) e withText( ).
 Inoltre è possibile specificare se un oggetto sia caratterizzato da più
 di un attributo, e considerarli tutti con il metodo allOf( ).
 perform( ) simula le interazioni utente sulla UI, gli argomenti necessari
 della funzione sono uno o più oggetti ViewAction.
 La classe ViewAction presenta una lista di metodi relativi alle azioni
 più comuni, come il click del mouse con click( ), scrivere testo in aree
 apposite con typeText( ), cancellare il testo con clearText( ), scorrere
 la vista con scrollTo( ).
 Infine i metodi della classe ViewAssertions sono usati per controllare
 che l’interfaccia rispetti lo stato desiderato in seguito alle azioni effettuat
e.
 
\end_layout

\end_body
\end_document
